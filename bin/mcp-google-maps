#!/usr/bin/env bash
set -e

# Container name for consistent management
CONTAINER_NAME="mcp-google-maps"

# Function to cleanup existing container
cleanup_existing() {
    if docker ps -q --filter "name=$CONTAINER_NAME" | grep -q .; then
        echo "Stopping existing $CONTAINER_NAME container..." >&2
        docker stop "$CONTAINER_NAME" >/dev/null 2>&1 || true
    fi
    
    if docker ps -aq --filter "name=$CONTAINER_NAME" | grep -q .; then
        echo "Removing existing $CONTAINER_NAME container..." >&2
        docker rm "$CONTAINER_NAME" >/dev/null 2>&1 || true
    fi
}

# Function to handle cleanup on script exit
cleanup_on_exit() {
    echo "Cleaning up $CONTAINER_NAME container..." >&2
    docker stop "$CONTAINER_NAME" >/dev/null 2>&1 || true
    docker rm "$CONTAINER_NAME" >/dev/null 2>&1 || true
}

# Set up trap for cleanup on script termination
trap cleanup_on_exit EXIT TERM INT

# Check if Google Maps API key is provided
if [[ -z "$GOOGLE_MAPS_API_KEY" ]]; then
    echo "Error: GOOGLE_MAPS_API_KEY environment variable is required" >&2
    exit 1
fi

# Clean up any existing container
cleanup_existing

# Start the container with proper flags for MCP usage
echo "Starting $CONTAINER_NAME container..." >&2
exec docker run \
    -i \
    --rm \
    --init \
    --stop-timeout=5 \
    --name="$CONTAINER_NAME" \
    -e GOOGLE_MAPS_API_KEY="$GOOGLE_MAPS_API_KEY" \
    mcp/google-maps