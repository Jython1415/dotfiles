#!/usr/bin/env bash
set -e

# Container name for consistent management
CONTAINER_NAME="mcp-google-maps"
LOCK_FILE="/tmp/${CONTAINER_NAME}.lock"

# Function to acquire lock and cleanup existing container
acquire_lock_and_cleanup() {
    # Use flock for file locking to prevent race conditions
    exec 200>"$LOCK_FILE"
    if ! flock -n 200; then
        echo "Another instance is starting $CONTAINER_NAME, waiting..." >&2
        flock 200  # Wait for lock
    fi
    
    # Force stop and remove any existing container with this name
    echo "Cleaning up any existing $CONTAINER_NAME container..." >&2
    docker stop "$CONTAINER_NAME" >/dev/null 2>&1 || true
    docker rm "$CONTAINER_NAME" >/dev/null 2>&1 || true
    
    # Wait a moment for cleanup to complete
    sleep 0.5
}

# Function to handle cleanup on script exit
cleanup_on_exit() {
    echo "Cleaning up $CONTAINER_NAME container..." >&2
    docker stop "$CONTAINER_NAME" >/dev/null 2>&1 || true
    docker rm "$CONTAINER_NAME" >/dev/null 2>&1 || true
}

# Set up trap for cleanup on script termination
trap cleanup_on_exit EXIT TERM INT

# Check if Google Maps API key is provided
if [[ -z "$GOOGLE_MAPS_API_KEY" ]]; then
    echo "Error: GOOGLE_MAPS_API_KEY environment variable is required" >&2
    exit 1
fi

# Acquire lock and clean up any existing container
acquire_lock_and_cleanup

# Start the container with proper flags for MCP usage
echo "Starting $CONTAINER_NAME container..." >&2
exec docker run \
    -i \
    --rm \
    --init \
    --stop-timeout=5 \
    --name="$CONTAINER_NAME" \
    -e GOOGLE_MAPS_API_KEY="$GOOGLE_MAPS_API_KEY" \
    mcp/google-maps